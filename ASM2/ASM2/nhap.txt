#pragma once
#include "Customer.h"
#include "Item.h"
#include <vector>
#include<iostream>
#include<string>
#include<fstream>
#include"MovieRecords.h"
#include"DVDs.h"
#include"Games.h"
class RentalShop
{
private:
	//vector<Customer*> customers;
	vector<Item*> items;
	/*Read one line of the Items.txt file to check which rental type the line is*/
	static void readOneItemInItemFile(ifstream& filein, Item* item, string& genre);
	static int checkTypeItem(Item* item);
	/*Read file and classofy the Item then add to vector Item*/
	static void readFileItem(ifstream& filein, vector<Item*>& items);
	/*Read one line of the Items.txt file to check which rental type the line is*/
	//static void readOneCustomerInCustomerFile(ifstream& filein, Customer* item);
public:
	/*getter*/
	//vector<Customer*> getCustomers();
	vector<Item*> getItems();
	/*setter*/
	//void setCustomers(vector<Customer*> customers);
	void setItems(vector<Item*> items);
	RentalShop(ifstream& filein);
	~RentalShop();
	/*getItemInformation*/
	//void getItemInformation();
	/*delete vector pointer*/
	template <typename T>
	void deletePointerVector(vector<T*>& items);
	
};

#include "RentalShop.h"
/*getter*/
/*
vector<Customer*> RentalShop::getCustomers() {
    return this->customers;
}
*/
vector<Item*> RentalShop::getItems() {
    return this->items;
}
/*setter*/
/*void RentalShop::setCustomers(vector<Customer*> customers) {
    this->customers = customers;
}*/
void RentalShop::setItems(vector<Item*> items) {
    this->items = items;
}
void RentalShop::readOneItemInItemFile(ifstream& filein, Item* item, string& genre) {
    // initialize seven variables to store 
    string id;
    string title;
    string rentalType;
    int numLoanType;
    string loanType;
    int numOfCopy;
    float fee;
    // read id
    getline(filein, id, ',');
    // read title
    getline(filein, title, ',');
    // read rental  type
    getline(filein, rentalType, ',');
    // check what type of rental Type
    item->setID(id);
    item->setTitle(title);
    item->setRentalType(rentalType);
    // set loanType and numLoanType
    filein >> numLoanType;
    item->setNumLoanType(numLoanType);
    filein.seekg(1, ios_base::cur); // exclude 1 byte of the character "-"
    getline(filein, loanType, ',');
    item->setLoanType(loanType);
    // set number of copy, fee, genre
    filein >> numOfCopy;
    item->setNumOfCopy(numOfCopy);
    filein.seekg(1, ios_base::cur); // exclude 1 byte of the character "-"
    filein >> fee;
    item->setFee(fee);
    filein.seekg(1, ios_base::cur); // exclude 1 byte of the character "-" 

    // check rental type of the Item object
    if (item->getRentalType() == "Record" || item->getRentalType() == "DVD") {
        getline(filein, genre);
    }
    else {
        string temp;
        getline(filein, temp);
    }
    // create a temp that read '\n'    
}
/*Check type of item
    return 2 : Record
    return 1: DVDs
    return 0: Game*/
int RentalShop::checkTypeItem(Item* item) {
    if (item->getRentalType() == "Record") {
        return 2;
    }
    else if (item->getRentalType() == "DVDs") {
        return 1;
    }
    else if (item->getRentalType() == "Game") {
        return 0;
    }
    // cout << "Invalid Type!";
    return -1;
}
/*Read file and classofy the Item then add to vector Item*/
void RentalShop::readFileItem(ifstream& filein, vector<Item*>& items) {
    // con tro o cuoi file thi dung
    for (;;) {
        if (!filein) break; // read until the end of the file
        Item* item = new Item();
        string genre = "";
        readOneItemInItemFile(filein, item, genre);
        int checkType = checkTypeItem(item);
        if (checkType == 2) {
            MovieRecords* mv = new MovieRecords(item);
            mv->setGenres(genre);
            items.push_back(mv);
        }
        else if (checkType == 1) {
            DVDs* dvd = new DVDs(item);
            dvd->setGenres(genre);
            items.push_back(dvd);
        }
        else if (checkType == 0) {
            Games* game = new Games(item);
            items.push_back(game);
        }
    }

}

// function to convert string to vector of string spliting by token
/*
vector<string> split(string str, string token) {
    vector<string>result;
    while (str.size()) {
        int index = str.find(token);
        if (index != string::npos) {
            result.push_back(str.substr(0, index));
            str = str.substr(index + token.size());
            if (str.size() == 0)result.push_back(str);
        }
        else {
            result.push_back(str);
            str = "";
        }
    }
    return result;
} */
/*read one line of the item in Customer file*/

/*void RentalShop::readOneCustomerInCustomerFile(ifstream& filein, Customer* customer) {
    // initialize seven variables to store 
    string id;
    string name;
    string address;
    string phone;
    int numOfRentals;
    string items;
    // read id
    getline(filein, id, ',');
    // read title
    getline(filein, name, ',');
    // read rental  type
    getline(filein, address, ',');
    getline(filein, phone, ',');
    filein >> numOfRentals;
    filein >> items;
    if (numOfRentals != 0) {
        customer->setListOfRentals(split(items, ","));
    }

}
*/
/*delete pointer vector*/
template <typename T>
void RentalShop::deletePointerVector(vector<T*>& items) {
    for (int i = 0; i < items.size(); i++) {
        delete items[i];
    }
    items.clear();
}
/*Constructor*/
RentalShop::RentalShop(ifstream& filein) {
    vector<Item*> items;
    readFileItem(filein, items);
    this->items = items;
    // clear memory
}
RentalShop::~RentalShop() {

}





